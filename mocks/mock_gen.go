// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sevigo/notify/core (interfaces: DirectoryWatcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/sevigo/notify/core"
	event "github.com/sevigo/notify/event"
	reflect "reflect"
)

// MockDirectoryWatcher is a mock of DirectoryWatcher interface
type MockDirectoryWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryWatcherMockRecorder
}

// MockDirectoryWatcherMockRecorder is the mock recorder for MockDirectoryWatcher
type MockDirectoryWatcherMockRecorder struct {
	mock *MockDirectoryWatcher
}

// NewMockDirectoryWatcher creates a new mock instance
func NewMockDirectoryWatcher(ctrl *gomock.Controller) *MockDirectoryWatcher {
	mock := &MockDirectoryWatcher{ctrl: ctrl}
	mock.recorder = &MockDirectoryWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirectoryWatcher) EXPECT() *MockDirectoryWatcherMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockDirectoryWatcher) Error() chan event.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(chan event.Error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockDirectoryWatcherMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockDirectoryWatcher)(nil).Error))
}

// Event mocks base method
func (m *MockDirectoryWatcher) Event() chan event.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event")
	ret0, _ := ret[0].(chan event.Event)
	return ret0
}

// Event indicates an expected call of Event
func (mr *MockDirectoryWatcherMockRecorder) Event() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockDirectoryWatcher)(nil).Event))
}

// Scan mocks base method
func (m *MockDirectoryWatcher) Scan(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockDirectoryWatcherMockRecorder) Scan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockDirectoryWatcher)(nil).Scan), arg0)
}

// StartWatching mocks base method
func (m *MockDirectoryWatcher) StartWatching(arg0 string, arg1 *core.WatchingOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartWatching", arg0, arg1)
}

// StartWatching indicates an expected call of StartWatching
func (mr *MockDirectoryWatcherMockRecorder) StartWatching(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWatching", reflect.TypeOf((*MockDirectoryWatcher)(nil).StartWatching), arg0, arg1)
}

// StopWatching mocks base method
func (m *MockDirectoryWatcher) StopWatching(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopWatching", arg0)
}

// StopWatching indicates an expected call of StopWatching
func (mr *MockDirectoryWatcherMockRecorder) StopWatching(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWatching", reflect.TypeOf((*MockDirectoryWatcher)(nil).StopWatching), arg0)
}
